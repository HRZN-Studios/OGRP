----[[ Framework specific functions ]]----local frameworkObjectlocal supportedFrameworks = {    ESX = {        resourceName = 'esx_core',        loadFramework = function()            frameworkObject = exports["es_extended"]:getSharedObject()        end,        registerItem = function()            frameworkObject.RegisterUsableItem(shConfig.itemId, function(source)                TriggerClientEvent('rahe-tablet:client:openTablet', source)            end)        end    },    QB = {        resourceName = 'qb-core',        loadFramework = function()            frameworkObject = exports['qb-core']:GetCoreObject()        end,        registerItem = function()            frameworkObject.Functions.CreateUseableItem(shConfig.itemId, function(source, _)                TriggerClientEvent('rahe-tablet:client:openTablet', source)            end)        end    },    CUSTOM = {        resourceName = '',        loadFramework = function()            -- This should be used and filled in when using a framework other than ESX/QB (if your framework has this).            -- This function should load your framework's core object into the 'frameworkObject' variable, like ESX and QB are doing.        end,        registerItem = function()            -- This should be used and filled in when you are using the tablet as an inventory item, and the item can be registered as usable in our resource.        end    }}if not supportedFrameworks[shConfig.framework] and shConfig.framework ~= 'AUTO' then    print("[^1ERROR^7] Invalid framework used in '/config/shared.lua' - please choose a supported value (AUTO / ESX / QB / CUSTOM).")endCreateThread(function()    local detectedFramework    if shConfig.framework == 'AUTO' then        if GetResourceState(supportedFrameworks.ESX.resourceName) ~= 'missing' then            detectedFramework = 'ESX'        elseif GetResourceState(supportedFrameworks.QB.resourceName) ~= 'missing' then            detectedFramework = 'QB'        end        if not detectedFramework then            print("[^1ERROR^7] Framework in '/config/shared.lua' is set to 'AUTO' but couldn't detect ESX or QB. Please follow documentation for other frameworks.")            return        end        shConfig.framework = detectedFramework    end    local framework = supportedFrameworks[shConfig.framework]    if framework.resourceName ~= '' and GetResourceState(framework.resourceName) ~= 'started' then        lib.waitFor(function()            return GetResourceState(framework.resourceName) == 'started'        end, ("Framework wasn't started in time (%s)!"):format(framework.resourceName), 60 * 1000)    end    framework.loadFramework()    if shConfig.openMethod == 'inventory' then        framework.registerItem()    endend)function getPlayerIdentifier(playerId)    if shConfig.framework == 'ESX' then        local xPlayer = frameworkObject.GetPlayerFromId(playerId)        if xPlayer then            return tostring(xPlayer.identifier)        end    elseif shConfig.framework == 'QB' then        local Player = frameworkObject.Functions.GetPlayer(playerId)        if Player then            return tostring(Player.PlayerData.citizenid)        end    else        -- CUSTOM    endend